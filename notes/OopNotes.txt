In OOP, methods are typically bound to classes and their instances, creating a strong association between the class and its behavior. In Go, functions are not bound to structs in the same way. Instead, Go uses a concept called "methods," which are just functions that have a receiver parameter of a specific type. This can be confusing for OOP developers because:

1. **No Class Hierarchies**: Go doesn't have classes or inheritance. Structs are used to group data, and methods are defined outside the struct with a receiver.
2. **Receiver Parameter**: Methods in Go are defined as functions with a receiver parameter, which can be a pointer or a value. This is different from OOP where methods are naturally associated with instances.
3. **No Implicit `this`**: There is no implicit `this` keyword in Go methods. The receiver must be explicitly named and used.
4. **Composition Over Inheritance**: Go prefers composition over inheritance, which means behaviors are often achieved by embedding structs rather than subclassing.

For example, in Go:

```go
type User struct {
    Name string
}

func (u *User) SayHello() {
    fmt.Println("Hello, my name is", u.Name)
}
```

Here, `SayHello` is a method of `User`, but it's defined as a function with a receiver `u *User`. This can be initially confusing for those used to OOP concepts.
